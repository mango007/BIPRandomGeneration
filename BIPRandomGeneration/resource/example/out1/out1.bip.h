// source file automatically generated by BIP tool
// from BIP description out1.bip
// generation date Wed May 14 11:04:04 CEST 2014

#ifndef out1_bip_h
#define out1_bip_h
#include <stdio.h>
#include "bip.h"
class SecondType;
class FirstType;
class CustomerPlugQuorum;
class ThirdType;
class plugConnector;
class ServerConnector;
class Server;
class Singleton;
class SendFromPlugToPlugConnector;
class SendFromPlugConToServerCon;
class SendFromServerConnToServer;
class SendFromServerToServerC;
class ServerCPlugC;
class PlugCToPlug;
class Root;
class SecondType : public Port {
  public:
    int& x;
  public : SecondType(const char* name, Atom* at, int& BIPParamx) 
: Port(name, at), x(BIPParamx)  {
  }
  public : SecondType(const char* name, Connector* at, int& BIPParamx) 
: Port(name, at), x(BIPParamx)  {
  }
};
class FirstType : public Port {
  public : FirstType(const char* name, Atom* at) 
: Port(name, at)  {
  }
  public : FirstType(const char* name, Connector* at) 
: Port(name, at)  {
  }
};
class CustomerPlugQuorum : public Atom {
  public : CustomerPlugQuorum(const char* name, Compound* holder, int BIPParamid) ; 
      // States for behavior automata
  public : 
    enum STATE { S1, S2, S3, S4, S5, S6, S7, S8};
      // State variable declaration
  public:
    STATE BIP_STATE;
  public:
    int id;
  private:
    SecondType* sendToChannel;
  private:
    SecondType* recieveFromServer;
  private:
    FirstType* sendToClient;
  private:
    FirstType* switchB;
  private:
    FirstType* ticker;
  private:
    int proposedValue;
  private:
    int decidedValueS;
  private:
    int decidedValue;
  public:
  inline SecondType* get_sendToChannel() const
  {
    return sendToChannel;
  }
  public:
  inline SecondType* get_recieveFromServer() const
  {
    return recieveFromServer;
  }
  public:
  inline FirstType* get_sendToClient() const
  {
    return sendToClient;
  }
  public:
  inline FirstType* get_switchB() const
  {
    return switchB;
  }
  public:
  inline FirstType* get_ticker() const
  {
    return ticker;
  }
  public:
  void initialize(LogicalClock* clock) ;
  public:
  void execute(Port* choice) ;
  private:
    bool BIP_TransGuard0;
  private:
    Constraint* BIP_Constraint0[1];
  private:
    bool BIP_TransGuard1;
  private:
    Constraint* BIP_Constraint1[1];
  private:
    bool BIP_TransGuard2;
  private:
    Constraint* BIP_Constraint2[1];
  private:
    bool BIP_TransGuard3;
  private:
    Constraint* BIP_Constraint3[1];
  private:
    bool BIP_TransGuard4;
  private:
    Constraint* BIP_Constraint4[1];
  private:
    bool BIP_TransGuard5;
  private:
    Constraint* BIP_Constraint5[1];
  private:
    bool BIP_TransGuard6;
  private:
    Constraint* BIP_Constraint6[1];
  private:
    bool BIP_TransGuard7;
  private:
    Constraint* BIP_Constraint7[1];
  private:
    bool BIP_TransGuard8;
  private:
    Constraint* BIP_Constraint8[1];
  private:
    bool BIP_TransGuard9;
  private:
    Constraint* BIP_Constraint9[1];
  private:
    bool BIP_TransGuard10;
  private:
    Constraint* BIP_Constraint10[1];
  private:
    bool BIP_TransGuard11;
  private:
    Constraint* BIP_Constraint11[1];
  public:
  Node * getState() 
  {
    return NULL;
  }
  public:
  void setState(Node * node) 
  {
  }
};
class ThirdType : public Port {
  public:
    int& x;
  public:
    int& y;
  public : ThirdType(const char* name, Atom* at, int& BIPParamx, int& BIPParamy) 
: Port(name, at), x(BIPParamx), y(BIPParamy)  {
  }
  public : ThirdType(const char* name, Connector* at, int& BIPParamx, int& BIPParamy) 
: Port(name, at), x(BIPParamx), y(BIPParamy)  {
  }
};
class plugConnector : public Atom {
  public : plugConnector(const char* name, Compound* holder, int BIPParamid) ; 
      // States for behavior automata
  public : 
    enum STATE { start_rcvFServer, sendServer_rcvFServer, start_sendTClient, sendServer_sendTClient};
      // State variable declaration
  public:
    STATE BIP_STATE;
  public:
    int id;
  private:
    SecondType* rcvPlug;
  private:
    SecondType* sendClient;
  private:
    ThirdType* rcvServer;
  private:
    ThirdType* SendS1;
  private:
    ThirdType* SendS2;
  private:
    ThirdType* SendS3;
  private:
    ThirdType* SendS4;
  private:
    int clientId;
  private:
    int proposedValue;
  private:
    int decidedValue;
  private:
    bool server1;
  private:
    bool server2;
  private:
    bool server3;
  private:
    bool server4;
  public:
  inline SecondType* get_rcvPlug() const
  {
    return rcvPlug;
  }
  public:
  inline SecondType* get_sendClient() const
  {
    return sendClient;
  }
  public:
  inline ThirdType* get_rcvServer() const
  {
    return rcvServer;
  }
  public:
  inline ThirdType* get_SendS1() const
  {
    return SendS1;
  }
  public:
  inline ThirdType* get_SendS2() const
  {
    return SendS2;
  }
  public:
  inline ThirdType* get_SendS3() const
  {
    return SendS3;
  }
  public:
  inline ThirdType* get_SendS4() const
  {
    return SendS4;
  }
  public:
  void initialize(LogicalClock* clock) ;
  public:
  void execute(Port* choice) ;
  private:
    bool BIP_TransGuard0;
  private:
    Constraint* BIP_Constraint0[1];
  private:
    bool BIP_TransGuard1;
  private:
    Constraint* BIP_Constraint1[1];
  private:
    bool BIP_TransGuard2;
  private:
    Constraint* BIP_Constraint2[1];
  private:
    bool BIP_TransGuard3;
  private:
    Constraint* BIP_Constraint3[1];
  private:
    bool BIP_TransGuard4;
  private:
    Constraint* BIP_Constraint4[1];
  private:
    bool BIP_TransGuard5;
  private:
    Constraint* BIP_Constraint5[1];
  private:
    bool BIP_TransGuard6;
  private:
    Constraint* BIP_Constraint6[1];
  private:
    bool BIP_TransGuard7;
  private:
    Constraint* BIP_Constraint7[1];
  private:
    bool BIP_TransGuard8;
  private:
    Constraint* BIP_Constraint8[1];
  private:
    bool BIP_TransGuard9;
  private:
    Constraint* BIP_Constraint9[1];
  private:
    bool BIP_TransGuard10;
  private:
    Constraint* BIP_Constraint10[1];
  private:
    bool BIP_TransGuard11;
  private:
    Constraint* BIP_Constraint11[1];
  private:
    bool BIP_TransGuard12;
  private:
    Constraint* BIP_Constraint12[1];
  private:
    bool BIP_TransGuard13;
  private:
    Constraint* BIP_Constraint13[1];
  public:
  Node * getState() 
  {
    return NULL;
  }
  public:
  void setState(Node * node) 
  {
  }
};
class ServerConnector : public Atom {
  public : ServerConnector(const char* name, Compound* holder, int BIPParamid) ; 
      // States for behavior automata
  public : 
    enum STATE { rcvPlug_rcvFServer, sendTServer_rcvFServer, crash_rcvFServer, rcvPlug_sendPlugC, sendTServer_sendPlugC, crash_sendPlugC};
      // State variable declaration
  public:
    STATE BIP_STATE;
  public:
    int id;
  private:
    ThirdType* rcvPlugC;
  private:
    ThirdType* sendServer;
  private:
    ThirdType* rcvServer;
  private:
    ThirdType* sendPlug;
  private:
    FirstType* loose;
  private:
    FirstType* msglost;
  private:
    int proposed;
  private:
    int decided;
  private:
    int clientIdSend;
  private:
    int clientIdRcv;
  public:
  inline ThirdType* get_rcvPlugC() const
  {
    return rcvPlugC;
  }
  public:
  inline ThirdType* get_sendServer() const
  {
    return sendServer;
  }
  public:
  inline ThirdType* get_rcvServer() const
  {
    return rcvServer;
  }
  public:
  inline ThirdType* get_sendPlug() const
  {
    return sendPlug;
  }
  public:
  inline FirstType* get_loose() const
  {
    return loose;
  }
  public:
  inline FirstType* get_msglost() const
  {
    return msglost;
  }
  public:
  void initialize(LogicalClock* clock) ;
  public:
  void execute(Port* choice) ;
  private:
    bool BIP_TransGuard0;
  private:
    Constraint* BIP_Constraint0[1];
  private:
    bool BIP_TransGuard1;
  private:
    Constraint* BIP_Constraint1[1];
  private:
    bool BIP_TransGuard2;
  private:
    Constraint* BIP_Constraint2[1];
  private:
    bool BIP_TransGuard3;
  private:
    Constraint* BIP_Constraint3[1];
  private:
    bool BIP_TransGuard4;
  private:
    Constraint* BIP_Constraint4[1];
  private:
    bool BIP_TransGuard5;
  private:
    Constraint* BIP_Constraint5[1];
  private:
    bool BIP_TransGuard6;
  private:
    Constraint* BIP_Constraint6[1];
  private:
    bool BIP_TransGuard7;
  private:
    Constraint* BIP_Constraint7[1];
  private:
    bool BIP_TransGuard8;
  private:
    Constraint* BIP_Constraint8[1];
  private:
    bool BIP_TransGuard9;
  private:
    Constraint* BIP_Constraint9[1];
  private:
    bool BIP_TransGuard10;
  private:
    Constraint* BIP_Constraint10[1];
  private:
    bool BIP_TransGuard11;
  private:
    Constraint* BIP_Constraint11[1];
  private:
    bool BIP_TransGuard12;
  private:
    Constraint* BIP_Constraint12[1];
  private:
    bool BIP_TransGuard13;
  private:
    Constraint* BIP_Constraint13[1];
  private:
    bool BIP_TransGuard14;
  private:
    Constraint* BIP_Constraint14[1];
  private:
    bool BIP_TransGuard15;
  private:
    Constraint* BIP_Constraint15[1];
  public:
  Node * getState() 
  {
    return NULL;
  }
  public:
  void setState(Node * node) 
  {
  }
};
class Server : public Atom {
  public : Server(const char* name, Compound* holder, int BIPParamid) ; 
      // States for behavior automata
  public : 
    enum STATE { RECEIVE, SEND, START};
      // State variable declaration
  public:
    STATE BIP_STATE;
  public:
    int id;
  private:
    ThirdType* RcvFromChannel;
  private:
    ThirdType* SendToServerC;
  private:
    int decidedValue;
  private:
    int proposedValue;
  private:
    int serverId;
  private:
    int ClientId;
  public:
  inline ThirdType* get_RcvFromChannel() const
  {
    return RcvFromChannel;
  }
  public:
  inline ThirdType* get_SendToServerC() const
  {
    return SendToServerC;
  }
  public:
  void initialize(LogicalClock* clock) ;
  public:
  void execute(Port* choice) ;
  private:
    bool BIP_TransGuard0;
  private:
    Constraint* BIP_Constraint0[1];
  private:
    bool BIP_TransGuard1;
  private:
    Constraint* BIP_Constraint1[1];
  private:
    bool BIP_TransGuard2;
  private:
    Constraint* BIP_Constraint2[1];
  public:
  Node * getState() 
  {
    return NULL;
  }
  public:
  void setState(Node * node) 
  {
  }
};
class Singleton : public Connector {
  public : Singleton(const char* name, Compound* holder, bool isSubconn, FirstType* BIPParamp) 
: Connector(name, holder, isSubconn, 1, BIPParamp), p(BIPParamp)  {
  }
  public:
    FirstType* p;
  public:
  void up() ;
  public:
  void dn() ;
  public:
  bool guard() ;
  public:
  bool complete() const
  {
    return p->synced();
  }
};
class SendFromPlugToPlugConnector : public Connector {
  public : SendFromPlugToPlugConnector(const char* name, Compound* holder, bool isSubconn, SecondType* BIPParamcustomerPlug, SecondType* BIPParamplugConn) 
: Connector(name, holder, isSubconn, 2, BIPParamcustomerPlug, BIPParamplugConn), customerPlug(BIPParamcustomerPlug), plugConn(BIPParamplugConn)  {
  }
  public:
    SecondType* customerPlug;
  public:
    SecondType* plugConn;
  public:
  void up() ;
  public:
  void dn() ;
  public:
  bool guard() ;
  public:
  bool complete() const
  {
    return customerPlug->synced()  &&  plugConn->synced();
  }
};
class SendFromPlugConToServerCon : public Connector {
  public : SendFromPlugConToServerCon(const char* name, Compound* holder, bool isSubconn, ThirdType* BIPParamplugConn, ThirdType* BIPParamserverConn) 
: Connector(name, holder, isSubconn, 2, BIPParamplugConn, BIPParamserverConn), plugConn(BIPParamplugConn), serverConn(BIPParamserverConn)  {
  }
  public:
    ThirdType* plugConn;
  public:
    ThirdType* serverConn;
  public:
  void up() ;
  public:
  void dn() ;
  public:
  bool guard() ;
  public:
  bool complete() const
  {
    return plugConn->synced()  &&  serverConn->synced();
  }
};
class SendFromServerConnToServer : public Connector {
  public : SendFromServerConnToServer(const char* name, Compound* holder, bool isSubconn, ThirdType* BIPParamserverConn, ThirdType* BIPParamserver) 
: Connector(name, holder, isSubconn, 2, BIPParamserverConn, BIPParamserver), serverConn(BIPParamserverConn), server(BIPParamserver)  {
  }
  public:
    ThirdType* serverConn;
  public:
    ThirdType* server;
  public:
  void up() ;
  public:
  void dn() ;
  public:
  bool guard() ;
  public:
  bool complete() const
  {
    return serverConn->synced()  &&  server->synced();
  }
};
class SendFromServerToServerC : public Connector {
  public : SendFromServerToServerC(const char* name, Compound* holder, bool isSubconn, ThirdType* BIPParamserver, ThirdType* BIPParamserverC) 
: Connector(name, holder, isSubconn, 2, BIPParamserver, BIPParamserverC), server(BIPParamserver), serverC(BIPParamserverC)  {
  }
  public:
    ThirdType* server;
  public:
    ThirdType* serverC;
  public:
  void up() ;
  public:
  void dn() ;
  public:
  bool guard() ;
  public:
  bool complete() const
  {
    return server->synced()  &&  serverC->synced();
  }
};
class ServerCPlugC : public Connector {
  public : ServerCPlugC(const char* name, Compound* holder, bool isSubconn, ThirdType* BIPParamserverC, ThirdType* BIPParamplugC) 
: Connector(name, holder, isSubconn, 2, BIPParamserverC, BIPParamplugC), serverC(BIPParamserverC), plugC(BIPParamplugC)  {
  }
  public:
    ThirdType* serverC;
  public:
    ThirdType* plugC;
  public:
  void up() ;
  public:
  void dn() ;
  public:
  bool guard() ;
  public:
  bool complete() const
  {
    return serverC->synced()  &&  plugC->synced();
  }
};
class PlugCToPlug : public Connector {
  public : PlugCToPlug(const char* name, Compound* holder, bool isSubconn, SecondType* BIPParamplugC, SecondType* BIPParamplug) 
: Connector(name, holder, isSubconn, 2, BIPParamplugC, BIPParamplug), plugC(BIPParamplugC), plug(BIPParamplug)  {
  }
  public:
    SecondType* plugC;
  public:
    SecondType* plug;
  public:
  void up() ;
  public:
  void dn() ;
  public:
  bool guard() ;
  public:
  bool complete() const
  {
    return plugC->synced()  &&  plug->synced();
  }
};
class Root : public Compound {
  public : Root(const char* name, Compound* holder) ; 
  public:
    CustomerPlugQuorum* plug1;
  public:
  inline CustomerPlugQuorum* get_plug1() const
  {
    return plug1;
  }
  public:
    CustomerPlugQuorum* plug2;
  public:
  inline CustomerPlugQuorum* get_plug2() const
  {
    return plug2;
  }
  public:
    plugConnector* plugC1;
  public:
  inline plugConnector* get_plugC1() const
  {
    return plugC1;
  }
  public:
    plugConnector* plugC2;
  public:
  inline plugConnector* get_plugC2() const
  {
    return plugC2;
  }
  public:
    ServerConnector* serverC1;
  public:
  inline ServerConnector* get_serverC1() const
  {
    return serverC1;
  }
  public:
    ServerConnector* serverC2;
  public:
  inline ServerConnector* get_serverC2() const
  {
    return serverC2;
  }
  public:
    ServerConnector* serverC3;
  public:
  inline ServerConnector* get_serverC3() const
  {
    return serverC3;
  }
  public:
    ServerConnector* serverC4;
  public:
  inline ServerConnector* get_serverC4() const
  {
    return serverC4;
  }
  public:
    Server* s1;
  public:
  inline Server* get_s1() const
  {
    return s1;
  }
  public:
    Server* s2;
  public:
  inline Server* get_s2() const
  {
    return s2;
  }
  public:
    Server* s3;
  public:
  inline Server* get_s3() const
  {
    return s3;
  }
  public:
    Server* s4;
  public:
  inline Server* get_s4() const
  {
    return s4;
  }
  public:
    Singleton* sendToClient1;
  public:
  inline Singleton* get_sendToClient1() const
  {
    return sendToClient1;
  }
  public:
    Singleton* switchB1;
  public:
  inline Singleton* get_switchB1() const
  {
    return switchB1;
  }
  public:
    Singleton* ticker1;
  public:
  inline Singleton* get_ticker1() const
  {
    return ticker1;
  }
  public:
    Singleton* sendToClient2;
  public:
  inline Singleton* get_sendToClient2() const
  {
    return sendToClient2;
  }
  public:
    Singleton* switchB2;
  public:
  inline Singleton* get_switchB2() const
  {
    return switchB2;
  }
  public:
    Singleton* ticker2;
  public:
  inline Singleton* get_ticker2() const
  {
    return ticker2;
  }
  public:
    Singleton* loose1;
  public:
  inline Singleton* get_loose1() const
  {
    return loose1;
  }
  public:
    Singleton* msglost1;
  public:
  inline Singleton* get_msglost1() const
  {
    return msglost1;
  }
  public:
    Singleton* loose2;
  public:
  inline Singleton* get_loose2() const
  {
    return loose2;
  }
  public:
    Singleton* msglost2;
  public:
  inline Singleton* get_msglost2() const
  {
    return msglost2;
  }
  public:
    Singleton* loose3;
  public:
  inline Singleton* get_loose3() const
  {
    return loose3;
  }
  public:
    Singleton* msglost3;
  public:
  inline Singleton* get_msglost3() const
  {
    return msglost3;
  }
  public:
    Singleton* loose4;
  public:
  inline Singleton* get_loose4() const
  {
    return loose4;
  }
  public:
    Singleton* msglost4;
  public:
  inline Singleton* get_msglost4() const
  {
    return msglost4;
  }
  public:
    SendFromPlugToPlugConnector* CtoCC1;
  public:
  inline SendFromPlugToPlugConnector* get_CtoCC1() const
  {
    return CtoCC1;
  }
  public:
    PlugCToPlug* CCtoC1;
  public:
  inline PlugCToPlug* get_CCtoC1() const
  {
    return CCtoC1;
  }
  public:
    SendFromPlugConToServerCon* CC1SC1;
  public:
  inline SendFromPlugConToServerCon* get_CC1SC1() const
  {
    return CC1SC1;
  }
  public:
    SendFromPlugConToServerCon* CC1SC2;
  public:
  inline SendFromPlugConToServerCon* get_CC1SC2() const
  {
    return CC1SC2;
  }
  public:
    SendFromPlugConToServerCon* CC1SC3;
  public:
  inline SendFromPlugConToServerCon* get_CC1SC3() const
  {
    return CC1SC3;
  }
  public:
    SendFromPlugConToServerCon* CC1SC4;
  public:
  inline SendFromPlugConToServerCon* get_CC1SC4() const
  {
    return CC1SC4;
  }
  public:
    SendFromPlugToPlugConnector* CtoCC2;
  public:
  inline SendFromPlugToPlugConnector* get_CtoCC2() const
  {
    return CtoCC2;
  }
  public:
    PlugCToPlug* CCtoC2;
  public:
  inline PlugCToPlug* get_CCtoC2() const
  {
    return CCtoC2;
  }
  public:
    SendFromPlugConToServerCon* CC2SC1;
  public:
  inline SendFromPlugConToServerCon* get_CC2SC1() const
  {
    return CC2SC1;
  }
  public:
    SendFromPlugConToServerCon* CC2SC2;
  public:
  inline SendFromPlugConToServerCon* get_CC2SC2() const
  {
    return CC2SC2;
  }
  public:
    SendFromPlugConToServerCon* CC2SC3;
  public:
  inline SendFromPlugConToServerCon* get_CC2SC3() const
  {
    return CC2SC3;
  }
  public:
    SendFromPlugConToServerCon* CC2SC4;
  public:
  inline SendFromPlugConToServerCon* get_CC2SC4() const
  {
    return CC2SC4;
  }
  public:
    SendFromServerToServerC* StoSC1;
  public:
  inline SendFromServerToServerC* get_StoSC1() const
  {
    return StoSC1;
  }
  public:
    SendFromServerConnToServer* SCtoS1;
  public:
  inline SendFromServerConnToServer* get_SCtoS1() const
  {
    return SCtoS1;
  }
  public:
    ServerCPlugC* SC1CC1;
  public:
  inline ServerCPlugC* get_SC1CC1() const
  {
    return SC1CC1;
  }
  public:
    ServerCPlugC* SC1CC2;
  public:
  inline ServerCPlugC* get_SC1CC2() const
  {
    return SC1CC2;
  }
  public:
    SendFromServerToServerC* StoSC2;
  public:
  inline SendFromServerToServerC* get_StoSC2() const
  {
    return StoSC2;
  }
  public:
    SendFromServerConnToServer* SCtoS2;
  public:
  inline SendFromServerConnToServer* get_SCtoS2() const
  {
    return SCtoS2;
  }
  public:
    ServerCPlugC* SC2CC1;
  public:
  inline ServerCPlugC* get_SC2CC1() const
  {
    return SC2CC1;
  }
  public:
    ServerCPlugC* SC2CC2;
  public:
  inline ServerCPlugC* get_SC2CC2() const
  {
    return SC2CC2;
  }
  public:
    SendFromServerToServerC* StoSC3;
  public:
  inline SendFromServerToServerC* get_StoSC3() const
  {
    return StoSC3;
  }
  public:
    SendFromServerConnToServer* SCtoS3;
  public:
  inline SendFromServerConnToServer* get_SCtoS3() const
  {
    return SCtoS3;
  }
  public:
    ServerCPlugC* SC3CC1;
  public:
  inline ServerCPlugC* get_SC3CC1() const
  {
    return SC3CC1;
  }
  public:
    ServerCPlugC* SC3CC2;
  public:
  inline ServerCPlugC* get_SC3CC2() const
  {
    return SC3CC2;
  }
  public:
    SendFromServerToServerC* StoSC4;
  public:
  inline SendFromServerToServerC* get_StoSC4() const
  {
    return StoSC4;
  }
  public:
    SendFromServerConnToServer* SCtoS4;
  public:
  inline SendFromServerConnToServer* get_SCtoS4() const
  {
    return SCtoS4;
  }
  public:
    ServerCPlugC* SC4CC1;
  public:
  inline ServerCPlugC* get_SC4CC1() const
  {
    return SC4CC1;
  }
  public:
    ServerCPlugC* SC4CC2;
  public:
  inline ServerCPlugC* get_SC4CC2() const
  {
    return SC4CC2;
  }
};
#endif
